diff --git a/chrome/browser/fingerprinting/override_manager.cc b/chrome/browser/fingerprinting/override_manager.cc
new file mode 100644
index 00000000000..d4e5f6a7b8c
--- /dev/null
+++ b/chrome/browser/fingerprinting/override_manager.cc
@@ -0,0 +1,142 @@
+// Copyright 2024 Ghostium Authors
+
+#include "chrome/browser/fingerprinting/override_manager.h"
+
+#include "base/json/json_file_value_serializer.h"
+#include "base/logging.h"
+#include "base/path_service.h"
+#include "base/files/file_util.h"
+
+namespace {
+
+const char kDefaultConfigPath[] = "ghostium_config.json";
+const char kEnabledKey[] = "enabled";
+const char kUserAgentKey[] = "userAgent";
+const char kPlatformKey[] = "platform";
+const char kHardwareConcurrencyKey[] = "hardwareConcurrency";
+const char kDeviceMemoryKey[] = "deviceMemory";
+const char kWebGLKey[] = "webGL";
+const char kCanvasKey[] = "canvas";
+const char kTimezoneKey[] = "timezone";
+const char kLanguagesKey[] = "languages";
+
+}  // namespace
+
+// static
+FingerprintOverrideManager* FingerprintOverrideManager::GetInstance() {
+  static base::NoDestructor<FingerprintOverrideManager> instance;
+  return instance.get();
+}
+
+FingerprintOverrideManager::FingerprintOverrideManager() {
+  base::FilePath executable_dir;
+  base::PathService::Get(base::DIR_EXE, &executable_dir);
+  config_path_ = executable_dir.AppendASCII(kDefaultConfigPath);
+  LoadConfig(config_path_);
+}
+
+FingerprintOverrideManager::~FingerprintOverrideManager() = default;
+
+bool FingerprintOverrideManager::LoadConfig(const base::FilePath& config_path) {
+  JSONFileValueDeserializer deserializer(config_path);
+  int error_code = 0;
+  std::string error_msg;
+  std::unique_ptr<base::Value> value =
+      deserializer.Deserialize(&error_code, &error_msg);
+
+  if (!value || !value->is_dict()) {
+    LOG(ERROR) << "Failed to load config: " << error_msg;
+    return false;
+  }
+
+  config_ = std::move(*value).TakeDict();
+  is_enabled_ = config_.FindBool(kEnabledKey).value_or(true);
+  return true;
+}
+
+std::string FingerprintOverrideManager::GetUserAgent() const {
+  if (!is_enabled_) return std::string();
+  const std::string* ua = config_.FindString(kUserAgentKey);
+  return ua ? *ua : "";
+}
+
+unsigned FingerprintOverrideManager::GetHardwareConcurrency() const {
+  if (!is_enabled_) return 0;
+  return config_.FindInt(kHardwareConcurrencyKey).value_or(
+      base::SysInfo::NumberOfProcessors());
+}
+
+double FingerprintOverrideManager::GetDeviceMemory() const {
+  if (!is_enabled_) return 0.0;
+  return config_.FindDouble(kDeviceMemoryKey).value_or(
+      base::SysInfo::AmountOfPhysicalMemoryGB());
+}
+
+std::string FingerprintOverrideManager::GetWebGLVendor() const {
+  if (!is_enabled_) return std::string();
+  const base::Value::Dict* webgl = config_.FindDict(kWebGLKey);
+  if (!webgl) return "";
+  const std::string* vendor = webgl->FindString("vendor");
+  return vendor ? *vendor : "";
+}
+
+bool FingerprintOverrideManager::IsWebDriver() const {
+  return false; // Always return false for stealth
+}
+
+void FingerprintOverrideManager::EnableSpoofing(bool enable) {
+  is_enabled_ = enable;
+}
+
+bool FingerprintOverrideManager::IsSpoofingEnabled() const {
+  return is_enabled_;
+}
+```

---

### 2. Navigator API Modifications

**0003-Modify-navigator-API.patch**
```diff
diff --git a/third_party/blink/renderer/core/frame/navigator.cc b/third_party/blink/renderer/core/frame/navigator.cc
index abc123..def456 100644
--- a/third_party/blink/renderer/core/frame/navigator.cc
+++ b/third_party/blink/renderer/core/frame/navigator.cc
@@ -4,6 +4,7 @@
 
 #include "third_party/blink/renderer/core/frame/navigator.h"
 
+#include "chrome/browser/fingerprinting/override_manager.h"
 #include "third_party/blink/public/common/user_agent/user_agent_metadata.h"
 #include "third_party/blink/renderer/core/frame/local_dom_window.h"
 #include "third_party/blink/renderer/core/frame/local_frame.h"
@@ -34,7 +35,10 @@ String Navigator::userAgent() const {
   if (!DomWindow())
     return String();
   const UserAgentMetadata& metadata = GetUAMetadata();
-  return String::FromUTF8(metadata.full_user_agent);
+  auto* override_manager = FingerprintOverrideManager::GetInstance();
+  std::string ua = override_manager->GetUserAgent();
+  return !ua.empty() ? String::FromUTF8(ua.c_str())
+                    : String::FromUTF8(metadata.full_user_agent);
 }
 
 unsigned Navigator::hardwareConcurrency() const {
@@ -42,7 +46,9 @@ unsigned Navigator::hardwareConcurrency() const {
   if (!DomWindow())
     return 0;
 
-  return base::SysInfo::NumberOfProcessors();
+  auto* override_manager = FingerprintOverrideManager::GetInstance();
+  unsigned hw_concurrency = override_manager->GetHardwareConcurrency();
+  return hw_concurrency > 0 ? hw_concurrency : base::SysInfo::NumberOfProcessors();
 }
 
 void Navigator::GetUserAgentMetadata(
@@ -51,6 +57,12 @@ void Navigator::GetUserAgentMetadata(
   if (!DomWindow())
     return;
 
+  auto* override_manager = FingerprintOverrideManager::GetInstance();
+  if (override_manager->IsSpoofingEnabled()) {
+    metadata->platform = override_manager->GetPlatform();
+    return;
+  }
+
   *metadata = GetUAMetadata();
 }