diff --git a/third_party/blink/renderer/core/frame/screen.cc b/third_party/blink/renderer/core/frame/screen.cc
index 51c1a2351e..420ce4a1ec 100644
--- a/third_party/blink/renderer/core/frame/screen.cc
+++ b/third_party/blink/renderer/core/frame/screen.cc
@@ -94,40 +94,43 @@ bool Screen::AreWebExposedScreenPropertiesEqual(
 }
 
 int Screen::height() const {
-  if (!DomWindow())
-    return 0;
+  return 1080;
+  // if (!DomWindow())
+  //   return 0;
 
-  if (ShouldReduceScreenSize()) {
-    return DomWindow()->innerHeight();
-  }
+  // if (ShouldReduceScreenSize()) {
+  //   return DomWindow()->innerHeight();
+  // }
 
-  return GetRect(/*available=*/false).height();
+  // return GetRect(/*available=*/false).height();
 }
 
 int Screen::width() const {
-  if (!DomWindow())
-    return 0;
+  return 1920;
+  // if (!DomWindow())
+  //   return 0;
 
-  if (ShouldReduceScreenSize()) {
-    return DomWindow()->innerWidth();
-  }
+  // if (ShouldReduceScreenSize()) {
+  //   return DomWindow()->innerWidth();
+  // }
 
-  return GetRect(/*available=*/false).width();
+  // return GetRect(/*available=*/false).width();
 }
 
 unsigned Screen::colorDepth() const {
-  // "If the user agent does not know the color depth or does not want to
-  // return it for privacy considerations, it should return 24."
-  //
-  // https://drafts.csswg.org/cssom-view/#dom-screen-colordepth
-  unsigned unknown_color_depth = 24u;
+  return 30;
+  // // "If the user agent does not know the color depth or does not want to
+  // // return it for privacy considerations, it should return 24."
+  // //
+  // // https://drafts.csswg.org/cssom-view/#dom-screen-colordepth
+  // unsigned unknown_color_depth = 24u;
 
-  if (!DomWindow() || ShouldReduceScreenSize()) {
-    return unknown_color_depth;
-  }
-  return GetScreenInfo().depth == 0
-             ? unknown_color_depth
-             : base::saturated_cast<unsigned>(GetScreenInfo().depth);
+  // if (!DomWindow() || ShouldReduceScreenSize()) {
+  //   return unknown_color_depth;
+  // }
+  // return GetScreenInfo().depth == 0
+  //            ? unknown_color_depth
+  //            : base::saturated_cast<unsigned>(GetScreenInfo().depth);
 }
 
 unsigned Screen::pixelDepth() const {
@@ -135,47 +138,51 @@ unsigned Screen::pixelDepth() const {
 }
 
 int Screen::availLeft() const {
-  if (!DomWindow())
-    return 0;
+  return 0;
+  // if (!DomWindow())
+  //   return 0;
 
-  if (ShouldReduceScreenSize()) {
-    return 0;
-  }
+  // if (ShouldReduceScreenSize()) {
+  //   return 0;
+  // }
 
-  return GetRect(/*available=*/true).x();
+  // return GetRect(/*available=*/true).x();
 }
 
 int Screen::availTop() const {
-  if (!DomWindow())
-    return 0;
+  return 0;
+  // if (!DomWindow())
+  //   return 0;
 
-  if (ShouldReduceScreenSize()) {
-    return 0;
-  }
+  // if (ShouldReduceScreenSize()) {
+  //   return 0;
+  // }
 
-  return GetRect(/*available=*/true).y();
+  // return GetRect(/*available=*/true).y();
 }
 
 int Screen::availHeight() const {
-  if (!DomWindow())
-    return 0;
+  return 1080;
+  // if (!DomWindow())
+  //   return 0;
 
-  if (ShouldReduceScreenSize()) {
-    return DomWindow()->innerHeight();
-  }
+  // if (ShouldReduceScreenSize()) {
+  //   return DomWindow()->innerHeight();
+  // }
 
-  return GetRect(/*available=*/true).height();
+  // return GetRect(/*available=*/true).height();
 }
 
 int Screen::availWidth() const {
-  if (!DomWindow())
-    return 0;
+  return 1920;
+  // if (!DomWindow())
+  //   return 0;
 
-  if (ShouldReduceScreenSize()) {
-    return DomWindow()->innerWidth();
-  }
+  // if (ShouldReduceScreenSize()) {
+  //   return DomWindow()->innerWidth();
+  // }
 
-  return GetRect(/*available=*/true).width();
+  // return GetRect(/*available=*/true).width();
 }
 
 void Screen::Trace(Visitor* visitor) const {
